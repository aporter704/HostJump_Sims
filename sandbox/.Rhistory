}
if(!forwardTime){
segmentMatrix[, c(1, 3)]  <- (segmentMatrix[, c(1, 3)] - max(segmentMatrix[, c(1, 3)])) + x.offset
}else{
segmentMatrix[, c(1, 3)]  <- segmentMatrix[, c(1, 3)] + x.offset
}
return(segmentMatrix)
}
segs <- get.tree.segments(tr, forwardTime = T)
head(segs)
get.tree.segments <- function(tr, x.offset = 0, forwardTime = T){
ordinates <- get.ordinates(tr)
segmentMatrix <- matrix(NA, nrow(tr$edge), 4)
for(i in 1:nrow(tr$edge)){
start <- ordinates[ordinates[, 'node.index'] == tr$edge[i, 1], c('x.coord', 'y.coord')]
end <-   ordinates[ordinates[, 'node.index'] == tr$edge[i, 2], c('x.coord', 'y.coord')]
segmentMatrix[i, ] <- c(start, end)
}
if(!forwardTime){
segmentMatrix[, c(1, 3)]  <- (segmentMatrix[, c(1, 3)] - max(segmentMatrix[, c(1, 3)])) + x.offset
}else{
segmentMatrix[, c(1, 3)]  <- segmentMatrix[, c(1, 3)] + x.offset
}
return(segmentMatrix)
}
tr <- rtree(10)
plot(c(-10, 10), c(-10, 20), type = 'n', bty = 'n')
segs <- get.tree.segments(tr, forwardTime = T)
head(segs)
for(i in 1:nrow(segs)){
lines(segs[i, c(1, 3)], segs[i, c(2, 4)], type = 'S')
}
segs <- get.tree.segments(tr, forwardTime = F)
head(segs)
for(i in 1:nrow(segs)){
lines(segs[i, c(1, 3)], segs[i, c(2, 4)], type = 'S')
}
segs <- get.tree.segments(tr, forwardTime = F, x.offset = 5)
head(segs)
for(i in 1:nrow(segs)){
lines(segs[i, c(1, 3)], segs[i, c(2, 4)], type = 'S')
}
segs <- get.tree.segments(tr, forwardTime = F)
head(segs)
for(i in 1:nrow(segs)){
lines(segs[i, c(1, 3)], segs[i, c(2, 4)], type = 'S')
}
segs <- get.tree.segments(tr, forwardTime = F, x.offset = 2)
head(segs)
for(i in 1:nrow(segs)){
lines(segs[i, c(1, 3)], segs[i, c(2, 4)], type = 'S')
}
get.tree.segments <- function(tr, x.offset = 0, forwardTime = T){
ordinates <- get.ordinates(tr)
segmentMatrix <- matrix(NA, nrow(tr$edge), 4)
for(i in 1:nrow(tr$edge)){
start <- ordinates[ordinates[, 'node.index'] == tr$edge[i, 1], c('x.coord', 'y.coord')]
end <-   ordinates[ordinates[, 'node.index'] == tr$edge[i, 2], c('x.coord', 'y.coord')]
segmentMatrix[i, ] <- c(start, end)
}
if(!forwardTime){
segmentMatrix[, c(1, 3)]  <- (segmentMatrix[, c(1, 3)] - max(segmentMatrix[, c(1, 3)])) + x.offset
}else{
segmentMatrix[, c(1, 3)]  <- segmentMatrix[, c(1, 3)] + x.offset
}
return(segmentMatrix)
}
tr <- rtree(10)
plot(c(-10, 10), c(-10, 20), type = 'n', bty = 'n')
segs <- get.tree.segments(tr, forwardTime = T)
head(segs)
for(i in 1:nrow(segs)){
lines(segs[i, c(1, 3)], segs[i, c(2, 4)], type = 'S')
}
segs <- get.tree.segments(tr, forwardTime = F)
head(segs)
for(i in 1:nrow(segs)){
lines(segs[i, c(1, 3)], segs[i, c(2, 4)], type = 'S')
}
segs <- get.tree.segments(tr, forwardTime = F, x.offset = 5)
head(segs)
for(i in 1:nrow(segs)){
lines(segs[i, c(1, 3)], segs[i, c(2, 4)], type = 'S')
}
segs <- get.tree.segments(tr, forwardTime = F, x.offset = 3)
head(segs)
for(i in 1:nrow(segs)){
lines(segs[i, c(1, 3)], segs[i, c(2, 4)], type = 'S')
}
segs <- get.tree.segments(tr, forwardTime = T, x.offset = 5)
segs <- get.tree.segments(tr, forwardTime = T, x.offset = 7)
head(segs)
for(i in 1:nrow(segs)){
lines(segs[i, c(1, 3)], segs[i, c(2, 4)], type = 'S')
}
get.tree.segments <- function(tr, x.offset = 0, y.offset = 0, forwardTime = T){
ordinates <- get.ordinates(tr)
segmentMatrix <- matrix(NA, nrow(tr$edge), 4)
for(i in 1:nrow(tr$edge)){
start <- ordinates[ordinates[, 'node.index'] == tr$edge[i, 1], c('x.coord', 'y.coord')]
end <-   ordinates[ordinates[, 'node.index'] == tr$edge[i, 2], c('x.coord', 'y.coord')]
segmentMatrix[i, ] <- c(start, end)
}
if(!forwardTime){
segmentMatrix[, c(1, 3)]  <- (segmentMatrix[, c(1, 3)] - max(segmentMatrix[, c(1, 3)])) + x.offset
}else{
segmentMatrix[, c(1, 3)]  <- segmentMatrix[, c(1, 3)] + x.offset
}
segmentMatrix[, c(2, 4)] <- segmentMatrix[, c(2, 4)] + y.offset
return(segmentMatrix)
}
tr <- rtree(10)
plot(c(-10, 10), c(-10, 20), type = 'n', bty = 'n')
segs <- get.tree.segments(tr, forwardTime = T)
head(segs)
for(i in 1:nrow(segs)){
lines(segs[i, c(1, 3)], segs[i, c(2, 4)], type = 'S')
}
segs <- get.tree.segments(tr, forwardTime = F, y.offset = -3)
head(segs)
for(i in 1:nrow(segs)){
lines(segs[i, c(1, 3)], segs[i, c(2, 4)], type = 'S')
}
par(mar = c(3, 3, 0.5, 0.5))
get.tree.segments <- function(tr, x.offset = 0, y.offset = 0, forwardTime = T){
ordinates <- get.ordinates(tr)
segmentMatrix <- matrix(NA, nrow(tr$edge), 4)
for(i in 1:nrow(tr$edge)){
start <- ordinates[ordinates[, 'node.index'] == tr$edge[i, 1], c('x.coord', 'y.coord')]
end <-   ordinates[ordinates[, 'node.index'] == tr$edge[i, 2], c('x.coord', 'y.coord')]
segmentMatrix[i, ] <- c(start, end)
}
if(!forwardTime){
segmentMatrix[, c(1, 3)]  <- (segmentMatrix[, c(1, 3)] - max(segmentMatrix[, c(1, 3)])) + x.offset
}else{
segmentMatrix[, c(1, 3)]  <- segmentMatrix[, c(1, 3)] + x.offset
}
segmentMatrix[, c(2, 4)] <- segmentMatrix[, c(2, 4)] + y.offset
return(segmentMatrix)
}
tr <- rtree(10)
plot(c(-10, 10), c(-10, 20), type = 'n', bty = 'n')
segs <- get.tree.segments(tr, forwardTime = T)
head(segs)
for(i in 1:nrow(segs)){
lines(segs[i, c(1, 3)], segs[i, c(2, 4)], type = 'S')
}
segs <- get.tree.segments(tr, forwardTime = F, y.offset = -3)
head(segs)
for(i in 1:nrow(segs)){
lines(segs[i, c(1, 3)], segs[i, c(2, 4)], type = 'S')
}
segs <- get.tree.segments(tr, forwardTime = F, y.offset = 3, x.offset = -5)
head(segs)
for(i in 1:nrow(segs)){
lines(segs[i, c(1, 3)], segs[i, c(2, 4)], type = 'S')
}
segs <- get.tree.segments(tr, forwardTime = T, y.offset = -5, x.offset = 5)
head(segs)
for(i in 1:nrow(segs)){
lines(segs[i, c(1, 3)], segs[i, c(2, 4)], type = 'S', col = 'darkgrey')
}
get.tree.segments <- function(tr, x.offset = 0, y.offset = 0, forwardTime = T){
ordinates <- get.ordinates(tr)
segmentMatrix <- matrix(NA, nrow(tr$edge), 4)
for(i in 1:nrow(tr$edge)){
start <- ordinates[ordinates[, 'node.index'] == tr$edge[i, 1], c('x.coord', 'y.coord')]
end <-   ordinates[ordinates[, 'node.index'] == tr$edge[i, 2], c('x.coord', 'y.coord')]
segmentMatrix[i, ] <- c(start, end)
}
if(!forwardTime){
segmentMatrix[, c(1, 3)]  <- (segmentMatrix[, c(1, 3)] - max(segmentMatrix[, c(1, 3)])) + x.offset
}else{
segmentMatrix[, c(1, 3)]  <- segmentMatrix[, c(1, 3)] + x.offset
}
segmentMatrix[, c(2, 4)] <- segmentMatrix[, c(2, 4)] + y.offset
return(segmentMatrix)
}
tr <- rtree(10)
plot(c(-10, 10), c(-10, 20), type = 'n', bty = 'n')
segs <- get.tree.segments(tr, forwardTime = T)
head(segs)
for(i in 1:nrow(segs)){
lines(segs[i, c(1, 3)], segs[i, c(2, 4)], type = 'S', col = 'darkgrey')
}
segs <- get.tree.segments(tr, forwardTime = F, y.offset = -3)
head(segs)
for(i in 1:nrow(segs)){
lines(segs[i, c(1, 3)], segs[i, c(2, 4)], type = 'S', col = 'darkgrey')
}
segs <- get.tree.segments(tr, forwardTime = F, y.offset = 3, x.offset = -5)
head(segs)
for(i in 1:nrow(segs)){
lines(segs[i, c(1, 3)], segs[i, c(2, 4)], type = 'S', col = 'darkgrey')
}
segs <- get.tree.segments(tr, forwardTime = T, y.offset = -5, x.offset = 5)
head(segs)
for(i in 1:nrow(segs)){
lines(segs[i, c(1, 3)], segs[i, c(2, 4)], type = 'S', col = 'darkgrey')
}
intervalLines <- seq(from = -10, to = 10, by = 1)
for(i in 1:length(intervalLines)) lines(rep(intervalLines, 2), c(-11, 20), lty = 2)
intervalLines <- seq(from = -10, to = 10, by = 1)
for(i in 1:length(intervalLines)) lines(rep(intervalLines[i], 2), c(-11, 20), lty = 2)
library(NELSI)
par(mar = c(3, 3, 0.5, 0.5))
get.tree.segments <- function(tr, x.offset = 0, y.offset = 0, forwardTime = T){
ordinates <- get.ordinates(tr)
segmentMatrix <- matrix(NA, nrow(tr$edge), 4)
for(i in 1:nrow(tr$edge)){
start <- ordinates[ordinates[, 'node.index'] == tr$edge[i, 1], c('x.coord', 'y.coord')]
end <-   ordinates[ordinates[, 'node.index'] == tr$edge[i, 2], c('x.coord', 'y.coord')]
segmentMatrix[i, ] <- c(start, end)
}
if(!forwardTime){
segmentMatrix[, c(1, 3)]  <- (segmentMatrix[, c(1, 3)] - max(segmentMatrix[, c(1, 3)])) + x.offset
}else{
segmentMatrix[, c(1, 3)]  <- segmentMatrix[, c(1, 3)] + x.offset
}
segmentMatrix[, c(2, 4)] <- segmentMatrix[, c(2, 4)] + y.offset
return(segmentMatrix)
}
tr <- rtree(10)
plot(c(-10, 10), c(-10, 20), type = 'n', bty = 'n')
segs <- get.tree.segments(tr, forwardTime = T)
head(segs)
for(i in 1:nrow(segs)){
lines(segs[i, c(1, 3)], segs[i, c(2, 4)], type = 'S', col = 'darkgrey')
}
segs <- get.tree.segments(tr, forwardTime = F, y.offset = -3)
head(segs)
for(i in 1:nrow(segs)){
lines(segs[i, c(1, 3)], segs[i, c(2, 4)], type = 'S', col = 'darkgrey')
}
segs <- get.tree.segments(tr, forwardTime = F, y.offset = 3, x.offset = -5)
head(segs)
for(i in 1:nrow(segs)){
lines(segs[i, c(1, 3)], segs[i, c(2, 4)], type = 'S', col = 'darkgrey')
}
segs <- get.tree.segments(tr, forwardTime = T, y.offset = -5, x.offset = 5)
head(segs)
for(i in 1:nrow(segs)){
lines(segs[i, c(1, 3)], segs[i, c(2, 4)], type = 'S', col = 'darkgrey')
}
intervalLines <- seq(from = -10, to = 10, by = 1)
for(i in 1:length(intervalLines)) lines(rep(intervalLines[i], 2), c(-11, 20), lty = 2, lwd = 0.5)
source("~/Dropbox/learning_material/plotTrees/phylogram.plot.R")
library(NELSI)
par(mar = c(3, 3, 0.5, 0.5))
get.tree.segments <- function(tr, x.offset = 0, y.offset = 0, forwardTime = T){
ordinates <- get.ordinates(tr)
segmentMatrix <- matrix(NA, nrow(tr$edge), 4)
for(i in 1:nrow(tr$edge)){
start <- ordinates[ordinates[, 'node.index'] == tr$edge[i, 1], c('x.coord', 'y.coord')]
end <-   ordinates[ordinates[, 'node.index'] == tr$edge[i, 2], c('x.coord', 'y.coord')]
segmentMatrix[i, ] <- c(start, end)
}
if(!forwardTime){
segmentMatrix[, c(1, 3)]  <- (segmentMatrix[, c(1, 3)] - max(segmentMatrix[, c(1, 3)])) + x.offset
}else{
segmentMatrix[, c(1, 3)]  <- segmentMatrix[, c(1, 3)] + x.offset
}
segmentMatrix[, c(2, 4)] <- segmentMatrix[, c(2, 4)] + y.offset
return(segmentMatrix)
}
tr <- rtree(10)
plot(c(-10, 10), c(-10, 20), type = 'n', bty = 'n')
segs <- get.tree.segments(tr, forwardTime = T)
head(segs)
for(i in 1:nrow(segs)){
lines(segs[i, c(1, 3)], segs[i, c(2, 4)], type = 'S', col = 'darkgrey', lwd = 3)
}
segs <- get.tree.segments(tr, forwardTime = F, y.offset = -5)
head(segs)
for(i in 1:nrow(segs)){
lines(segs[i, c(1, 3)], segs[i, c(2, 4)], type = 'S', col = 'darkgrey', lwd = 3)
}
segs <- get.tree.segments(tr, forwardTime = F, y.offset = 3, x.offset = -5)
head(segs)
for(i in 1:nrow(segs)){
lines(segs[i, c(1, 3)], segs[i, c(2, 4)], type = 'S', col = 'darkgrey', lwd = 3)
}
segs <- get.tree.segments(tr, forwardTime = T, y.offset = -5, x.offset = 5)
head(segs)
for(i in 1:nrow(segs)){
lines(segs[i, c(1, 3)], segs[i, c(2, 4)], type = 'S', col = 'darkgrey', lwd = 3)
}
intervalLines <- seq(from = -10, to = 10, by = 1)
for(i in 1:length(intervalLines)) lines(rep(intervalLines[i], 2), c(-11, 20), lty = 2, lwd = 0.5)
par(mar = c(3, 3, 0.5, 0.5))
get.tree.segments <- function(tr, x.offset = 0, y.offset = 0, forwardTime = T){
ordinates <- get.ordinates(tr)
segment.matrix <- matrix(NA, nrow(tr$edge), 4)
for(i in 1:nrow(tr$edge)){
start <- ordinates[ordinates[, 'node.index'] == tr$edge[i, 1], c('x.coord', 'y.coord')]
end <-   ordinates[ordinates[, 'node.index'] == tr$edge[i, 2], c('x.coord', 'y.coord')]
segment.matrix[i, ] <- c(start, end)
}
if(!forwardTime){
segment.matrix[, c(1, 3)]  <- (segment.matrix[, c(1, 3)] - max(segment.matrix[, c(1, 3)])) + x.offset
}else{
segment.matrix[, c(1, 3)]  <- segment.matrix[, c(1, 3)] + x.offset
}
segment.matrix[, c(2, 4)] <- segment.matrix[, c(2, 4)] + y.offset
return(segment.matrix)
}
plot.tree.segments <- function(tree.segments, new.plot = T...){
if(new.plot){
plot(range(tree.segments[, c(1, 3)]), range(tree.segments[, c(2, 4)]), type = 'n', ...)
}
for(i in 1:nrow(tree.segments)){
lines(tree.segments[i, c(1, 3)], tree.segments[i, c(2, 4)], type = 'S', ...)
}
}
tr <- rtree(10)
segs <- get.tree.segments(tr)
plot.tree.segments(segs)
plot.tree.segments <- function(tree.segments, new.plot = T, ...){
if(new.plot){
plot(range(tree.segments[, c(1, 3)]), range(tree.segments[, c(2, 4)]), type = 'n', ...)
}
for(i in 1:nrow(tree.segments)){
lines(tree.segments[i, c(1, 3)], tree.segments[i, c(2, 4)], type = 'S', ...)
}
}
tr <- rtree(10)
segs <- get.tree.segments(tr)
plot.tree.segments(segs)
plot.tree.segments(segs, xlim = c(-5, 5))
plot.tree.segments(segs, new.plot = F, col = 'red')
segs <- get.tree.segments(tr)
segs <- get.tree.segments(tr, x.offset = -2)
plot.tree.segments(segs, new.plot = F, col = 'red')
segs <- get.tree.segments(tr)
plot.tree.segments(segs, xlim = c(-5, 5))
segs <- get.tree.segments(tr, x.offset = -2, forwardTime = F)
plot.tree.segments(segs, new.plot = F, col = 'red')
plot.tree.segments <- function(tree.segments, new.plot = T, ...){
if(new.plot){
plot(range(tree.segments[, c(1, 3)]), range(tree.segments[, c(2, 4)]), type = 'n', ...)
}
for(i in 1:nrow(tree.segments)){
segments(tree.segments[i, c(1, 3)], tree.segments[i, c(2, 4)], type = 'S', ...)
}
}
tr <- rtree(10)
segs <- get.tree.segments(tr)
plot.tree.segments(segs, xlim = c(-5, 5))
segs <- get.tree.segments(tr, x.offset = -2, forwardTime = F)
plot.tree.segments(segs, new.plot = F, col = 'red')
plot.tree.segments <- function(tree.segments, new.plot = T, ...){
if(new.plot){
plot(range(tree.segments[, c(1, 3)]), range(tree.segments[, c(2, 4)]), type = 'n', ...)
}
for(i in 1:nrow(tree.segments)){
lines(tree.segments[i, c(1, 3)], tree.segments[i, c(2, 4)], ...)
}
}
tr <- rtree(10)
segs <- get.tree.segments(tr)
plot.tree.segments(segs, xlim = c(-5, 5))
segs <- get.tree.segments(tr, x.offset = -2, forwardTime = F)
plot.tree.segments(segs, new.plot = F, col = 'red')
plot.tree.segments(segs, new.plot = F, col = 'red', type = 'S')
tr <- rtree(10)
segs <- get.tree.segments(tr)
plot.tree.segments(segs, xlim = c(-5, 5))
segs <- get.tree.segments(tr, x.offset = -2, forwardTime = F)
plot.tree.segments(segs, new.plot = F, col = 'red', type = 'S')
plot.tree.segments(segs, new.plot = F, col = 'red', type = 's')
tr <- rtree(10)
segs <- get.tree.segments(tr)
plot.tree.segments(segs, xlim = c(-5, 5))
segs <- get.tree.segments(tr, x.offset = -2, forwardTime = F)
plot.tree.segments(segs, new.plot = F, col = 'red', type = 's')
tr <- rtree(10)
segs <- get.tree.segments(tr)
plot.tree.segments(segs, xlim = c(-5, 5))
segs <- get.tree.segments(tr, x.offset = -2, forwardTime = F)
plot.tree.segments(segs, new.plot = F, col = 'red', type = 'S')
plot.tree.segments(segs, new.plot = F, col = 'red', type = 'S', lty = 2)
tr <- rtree(10)
segs <- get.tree.segments(tr)
plot.tree.segments(segs, xlim = c(-5, 5))
segs <- get.tree.segments(tr, x.offset = -2, forwardTime = F)
plot.tree.segments(segs, new.plot = F, col = 'red', type = 'S', lty = 2)
tr <- rtree(10)
segs <- get.tree.segments(tr)
plot.tree.segments(segs, xlim = c(-5, 5))
segs <- get.tree.segments(tr, x.offset = -2, forwardTime = F)
plot.tree.segments(segs, new.plot = F, col = 'red', type = 'S', lty = 2)
tr <- rtree(10)
segs <- get.tree.segments(tr)
plot.tree.segments(segs, xlim = c(-5, 5))
segs <- get.tree.segments(tr, x.offset = -2, forwardTime = F)
plot.tree.segments(segs, new.plot = F, col = 'red', type = 'S', lty = 1:3)
tr <- rtree(10)
segs <- get.tree.segments(tr)
plot.tree.segments(segs, xlim = c(-5, 5))
segs <- get.tree.segments(tr, x.offset = -2, forwardTime = F)
plot.tree.segments(segs, new.plot = F, col = 'red', type = 'S', lty = 1:3)
plot.tree.segments(segs, xlim = c(-5, 5))
segs <- get.tree.segments(tr, x.offset = -2, forwardTime = F)
plot.tree.segments(segs, new.plot = F, col = 'red', type = 'S', lty = c(1, 2))
tr <- rtree(10)
segs <- get.tree.segments(tr)
plot.tree.segments(segs, xlim = c(-5, 5))
segs <- get.tree.segments(tr, x.offset = -2, forwardTime = F)
plot.tree.segments(segs, new.plot = F, col = 'red', type = 'S', lty = c(1, 2))
plot.tree.segments <- function(tree.segments, new.plot = T, ...){
if(new.plot){
plot(range(tree.segments[, c(1, 3)]), range(tree.segments[, c(2, 4)]), type = 'n', ...)
}
for(i in 1:nrow(tree.segments)){
lines(tree.segments[i, c(1, 3)], tree.segments[i, c(2, 4)], ...)
}
}
tr <- rtree(10)
segs <- get.tree.segments(tr)
plot.tree.segments(segs, xlim = c(-5, 5))
segs <- get.tree.segments(tr, x.offset = -2, forwardTime = F)
plot.tree.segments(segs, new.plot = F, col = 'red', type = 'S')
tr <- rtree(10)
segs <- get.tree.segments(tr)
plot.tree.segments(segs, xlim = c(-5, 5))
segs <- get.tree.segments(tr, x.offset = -2, forwardTime = F)
plot.tree.segments(segs, new.plot = F, col = 'red', type = 'S')
plot.tree.segments <- function(tree.segments, new.plot = T, ...){
if(new.plot){
plot(range(tree.segments[, c(1, 3)]), range(tree.segments[, c(2, 4)]), type = 'n', ...)
}
for(i in 1:nrow(tree.segments)){
lines(tree.segments[i, c(1, 3)], tree.segments[i, c(2, 4)], type = 'S', ...)
}
}
tr <- rtree(10)
segs <- get.tree.segments(tr)
plot.tree.segments(segs, xlim = c(-5, 5))
segs <- get.tree.segments(tr, x.offset = -2, forwardTime = F)
plot.tree.segments(segs, new.plot = F, col = 'red', type = 'S')
tr <- rtree(10)
segs <- get.tree.segments(tr)
plot.tree.segments(segs, xlim = c(-5, 5))
segs <- get.tree.segments(tr, x.offset = -2, forwardTime = F)
plot.tree.segments(segs, new.plot = F, col = 'red')
get.ordinates()
get.ordinates
get.ordinates(rtree(1000))
get.ordinates(rtree(10000))
get.ordinates(rtree(2000))
tr <- rtree(1300)
segs <- get.tree.segments(tr)
plot.tree.segments(segs, xlim = c(-5, 5))
segs <- get.tree.segments(tr, x.offset = -2, forwardTime = F)
plot.tree.segments(segs, new.plot = F, col = 'red')
segs <- get.tree.segments(tr)
plot.tree.segments(segs, xlim = c(-500, 500))
segs <- get.tree.segments(tr, x.offset = -2, forwardTime = F)
plot.tree.segments(segs, new.plot = F, col = 'red')
plot.tree.segments(segs, xlim = c(-50, 50))
segs <- get.tree.segments(tr, x.offset = -2, forwardTime = F)
plot.tree.segments(segs, new.plot = F, col = 'red')
tr <- rtree(1300)
segs <- get.tree.segments(tr)
plot.tree.segments(segs, xlim = c(-50, 50))
segs <- get.tree.segments(tr, x.offset = -2, forwardTime = F)
plot.tree.segments(segs, new.plot = F, col = 'red')
plot.tree.segments(segs, xlim = c(-20, 20))
segs <- get.tree.segments(tr, x.offset = -2, forwardTime = F)
plot.tree.segments(segs, new.plot = F, col = 'red')
segs <- get.tree.segments(tr)
plot.tree.segments(segs, xlim = c(-20, 20))
segs <- get.tree.segments(tr, x.offset = -2, forwardTime = F)
plot.tree.segments(segs, new.plot = F, col = 'red')
tr <- rtree(300)
segs <- get.tree.segments(tr)
plot.tree.segments(segs, xlim = c(-20, 20))
segs <- get.tree.segments(tr, x.offset = -2, forwardTime = F)
plot.tree.segments(segs, new.plot = F, col = 'red')
#
setwd('~/Dropbox/projects_WORKING/speciesJumpSimulations/HostJump_Sims/sandbox/')
#
setwd('~/Dropbox/projects_WORKING/speciesJumpSimulations/HostJump_Sims/sandbox/')
dir()
trees <- read.nexus('SARS_lowMinkSample.nexus.tree')
#
library(NELSI)
setwd('~/Dropbox/projects_WORKING/speciesJumpSimulations/HostJump_Sims/sandbox/')
dir()
trees <- read.nexus('SARS_lowMinkSample.nexus.tree')
allnode.times(trees[[1]], keeproot = T)
range(allnode.times(trees[[1]], keeproot = T))
range(allnode.times(trees[[1]], keeproot = T, reverse = T))
range(allnode.times(trees[[1]], keeproot = T, reverse = F))
range(allnode.times(trees[[1]], keeproot = T, reverse = F))
range(allnode.times(trees[[1]], keeproot = F, reverse = F))
range(allnode.times(trees[[1]], keeproot = T, reverse = T))
range(allnode.times(trees[[1]], keeproot = F, reverse = T))
range(allnode.times(trees[[1]], keeproot = T, reverse = T))
trees <- read.nexus('SARS_lowMinkSample.nexus.tree')
sapply(trees, function(x) max(allnode.times(x, keeproot = T, reverse = T))
)
sapply(trees, function(x) max(allnode.times(x, keeproot = T, reverse = T)))
tree_heights <- sapply(trees, function(x) max(allnode.times(x, keeproot = T, reverse = T)))
hist(tree_heights)
setwd('~/Dropbox/projects_WORKING/speciesJumpSimulations/HostJump_Sims/sandbox/')
dir()
trees <- read.nexus('SARS_lowMinkSample.nexus.tree')
tree_heights <- sapply(trees, function(x) max(allnode.times(x, keeproot = T, reverse = T)))
hist(tree_heights)
tree_sizes <- sapply(trees, function(x) length(x$tip.label))
hist(tree_sizes)
